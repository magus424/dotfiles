priority 50

## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet array "array" b
$${1:arrayName} = array(
	'${2}' => ${3},
);${4}
endsnippet

snippet arr "array definition" b
$${1:arrayName} = array(
	'${2}' => ${3},
);${4}
endsnippet

snippet def "def" b
define('${1}'${2});${3}
endsnippet

snippet do "do" b
do
{
	${2:${VISUAL}}
} while (${1:/* condition */});"
endsnippet

snippet doc_f "doc_f" b
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 */
${1:public }function ${2:someFunc}(${3})
{
	${6}
}
endsnippet

snippet doc_i "doc_i" b
/**
 * $1
 * @package ${2:default}
 * @author ${3:`!v g:snips_author`}
 */
interface ${1:someClass}
{
	${4}
}
endsnippet

snippet else "else" b
else
{
	${1:${VISUAL}}
}
endsnippet

snippet get "get"
$_GET['${1}']${2}
endsnippet

snippet if "if" b
if (${1:/* condition */})
{
	${2:${VISUAL}}
}
endsnippet

snippet elif "elseif" b
elseif (${1:/* condition */})
{
	${2:${VISUAL}}
}
endsnippet

snippet inc "inc" b
include '${1:file}';${2}
endsnippet

snippet log "log" b
error_log(var_export(${1}, true));${2}
endsnippet

snippet post "post"
$_POST['${1}']${2}
endsnippet

snippet req1 "req1" b
require_once '${1:file}';${2}
endsnippet

snippet session "session"
$_SESSION['${1}']${2}
endsnippet

snippet t "t"
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

snippet getter "PHP Class Getter" b
public function get${1/\w+\s*/\u$0/}(): $2
{
	return $this->$1;
}$4
endsnippet

snippet setter "PHP Class Setter" b
public function set${1/\w+\s*/\u$0/}($2 $$1): self
{
	$this->$1 = $$1;
	${3:return $this;}
}$4
endsnippet

snippet gs "PHP Class Getter Setter" b
public function get${1/\w+\s*/\u$0/}(): $2
{
	return $this->$1;
}

public function set${1/\w+\s*/\u$0/}($2 $$1): self
{
	$this->$1 = $$1;
	return $this;
}$3
endsnippet

snippet pub "Public function" b
public function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet pro "Protected function" b
protected function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet cpub "Public Cached Function" b
public function $1($2)
{
	return $this->getCache()->_$1($2);
}

protected function _${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet cpri "Private Cached Function" b
private function ${1:name}FromDb(${2:$param})
{
	${3:${VISUAL:return null;}}
}

private function $1($2)
{
	return $this->getCache()->$1FromDb($2);
}
endsnippet

snippet pubs "Public static function" b
public static function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet pros "Protected static function" b
protected static function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet pris "Private static function" b
private static function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet fu "Function snip" b
function ${1:name}(${2:$param})
{
	${3:${VISUAL:return null;}}
}
endsnippet

snippet for "for" b
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++})
{
	${4:${VISUAL}}
}
endsnippet

snippet forek "Foreach loop w/key" b
foreach ($${1:variable} as $${2:key} => $${3:value})
{
	${4:${VISUAL}}
}
endsnippet

snippet fore "Foreach loop" b
foreach ($${1:variable} as $${2:value})
{
	${3:${VISUAL}}
}
endsnippet

snippet new "New class instance" b
$$1 = new $1($2);
endsnippet

snippet ife "if else" b
if (${1:/* condition */})
{
	${2:// code...}
}
else
{
	${3:// code...}
}
endsnippet

snippet class "Class declaration template" b
class ${1:`!p snip.rv=snip.fn.split('.')[0]`}
{
	public function ${3:__construct}($4)
	{
		${5:// code}
	}
}
endsnippet

snippet construct "__construct()" b
/**
 * @param $2mixed ${1/, /\n     * \@param mixed /g}
 */
public function __construct(${1:$dependencies})
{
	${1/\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}
endsnippet

snippet while "while loop" b
while (${1:/* condition */})
{
	${2:${VISUAL}}
}
endsnippet

snippet gpc "input clean" b
${1:variable} = $vbulletin->input->clean_gpc('${2:gprc}', '${3:name}', TYPE_${4:STR});
endsnippet
snippet gpca "multi-input clean" b
$vbulletin->input->clean_array_gpc('${1:gprc}', array(
	'${2:name}' => TYPE_${3:STR},
));
endsnippet

snippet gpci "additional input for gpca" b
'${1:name}' => TYPE_${2:TYPE},
endsnippet

snippet outtemp "print old-style template" b
print_output(include(get_php_template('${1:template_name}')));
endsnippet

snippet vartemp "assign old-style template to variable" b
${1:variable} = include(get_php_template('${2:template_name}'));
endsnippet

snippet mget "memcache get" b
${1:variable} = $vbulletin->sd['memcachemanual']->get($cache_key, ${2:"namespace"});
endsnippet

snippet mset "memcache set" b
$vbulletin->sd['memcachemanual']->set($cache_key, ${1:variable}, ${2:timeout}, ${3:"namespace"});
endsnippet

snippet mdec "memcache decrement" b
$vbulletin->sd['memcachemanual']->decrement($cache_key, 1, ${1:"namespace"});
endsnippet

snippet mdel "memcache delete" b
$vbulletin->sd['memcachemanual']->delete($cache_key, ${1:"namespace"});
endsnippet

snippet mflush "memcache flush" b
$vbulletin->sd['memcachemanual']->flush($namespace);
endsnippet

snippet minc "memcache increment" b
$vbulletin->sd['memcachemanual']->increment($cache_key, 1, ${1:"namespace"});
endsnippet

snippet mcache "memcache block" b
${1:variable} = $vbulletin->sd['memcachemanual']->get($cache_key, ${2:"namespace"});
if ($1 === false)
{
	$vbulletin->sd['memcachemanual']->set($cache_key, $1, ${3:timeout}, $2);
}
endsnippet

snippet twig "Twig template render" b
$html = SD_Template::renderTemplate("${1:template name}", array(
	${2}
));
print_output($html);
endsnippet

snippet dc "Database test comment" b
/**
 * @covers $1
 * @group database
 */
 $2
endsnippet

snippet df "Database test function" b
/**
 * @covers ::$1
 * @group database
 */
public function test${2:MethodName}()
{
	${3:$this->markTestIncomplete('Not yet implemented.');}
}$4
endsnippet

snippet tf "Test function" b
/**
 * @covers ::$1
 */
public function test${2:MethodName}()
{
	${3:$this->markTestIncomplete('Not yet implemented.');}
}$4
endsnippet

snippet tff "Test function (no comments)"
public function test${1:MethodName}()
{
	${2:$this->markTestIncomplete('Not yet implemented.');}
}$3
endsnippet

snippet tfc "Test function comment"
/**
 * @covers ::$1
 */
endsnippet

snippet doc_v "Doc comment for variable"
/**
 * @var $1
 */
endsnippet

snippet pubv "Public variable with comment"
/**
 * @var $1
 */
public $${2:variable};$3
endsnippet

snippet prov "Protected variable with comment"
/**
 * @var $1
 */
protected $${2:variable};$3
endsnippet

snippet priv "Private variable with comment"
/**
 * @var $1
 */
private $${2:variable};$3
endsnippet

snippet sans "Sanitize string"
${1:$variable} = $db->escape_string($1);
endsnippet

snippet sani "Sanitize int"
${1:$variable} = (int)$1;
endsnippet

snippet switch "Switch statement"
switch ($${1:variable})
{
	case '${2:value}':
		${3}
		break;
	${0}
	default:
		${4}
		break;
}
endsnippet

# :vim:ft=snippets:
